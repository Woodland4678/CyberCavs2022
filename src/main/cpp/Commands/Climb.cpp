// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/Climb.h"
#include <frc/smartdashboard/SmartDashboard.h>
#include <frc/Timer.h>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Climb::Climb(): frc::Command() {
    // Use Requires() here to declare subsystem dependencies
    // eg. Requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::climber.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
bool done = false;
auto m_originalTime = 0_s;
// Called just before this Command runs the first time
void Climb::Initialize() {
    m_originalTime = frc::Timer::GetFPGATimestamp();
}

int count = 0;
bool doneCalibrate = false;
// Called repeatedly when this Command is scheduled to run
void Climb::Execute() {
    //if (frc::Timer::GetFPGATimestamp() - m_originalTime > 3_s) {
        // m_climber->SetClimberPower(0.15);
        if (!doneCalibrate){
            doneCalibrate = Robot::climber->CalibrateClimber();
        }
        
        else if (doneCalibrate){
            count++;
        }
        frc::SmartDashboard::PutNumber("Climb command count", count);
        if (count>=50){
            Robot::climber->Climb();
            /*m_climber->SetClimberPosition(94.4);
            if (count >= 75) {
                done = true;
                count = 0;
                doneCalibrate = false;
            }*/
        }else{
            done = false;
        }
    //}

}

// Make this return true when this Command no longer needs to run execute()
bool Climb::IsFinished() {
    return done;
}

// Called once after isFinished returns true
void Climb::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Climb::Interrupted() {

}
