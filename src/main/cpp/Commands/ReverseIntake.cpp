// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/ReverseIntake.h"
#include <frc/SmartDashboard/SmartDashboard.h>
#include <frc/Timer.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ReverseIntake::ReverseIntake(): frc::Command() {
    // Use Requires() here to declare subsystem dependencies
    // eg. Requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    Requires(Robot::intake.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ReverseIntake::Initialize() {
    Robot::intake->SetIsReversing(true);
}


double inversePosition = 8.88; //8.88
bool doneReverse = false;
bool lostFirstOne= false; 


// Called repeatedly when this Command is scheduled to run
void ReverseIntake::Execute() {
    if (Robot::intake->GetBallCount() == 2) {
        Robot::intake->SetHopperPower(-0.8);
        Robot::intake->SetPusherPower(-0.7);
        Robot::intake->SetRollerPower(-0.7);
        if (Robot::intake->GetLowSensor() == true) {
            Robot::intake->SetIndexerPower(0);
        }
        else {
            Robot::intake->SetIndexerPower(0.4);
        }
    }
    else if (Robot::intake->GetBallCount() < 2) {
        Robot::intake->SetHopperPower(-0.8);
        Robot::intake->SetPusherPower(-0.7);
        Robot::intake->SetRollerPower(-0.7);
        Robot::intake->SetIndexerPower(0.7);
    }
    /*
    if (Robot::intake->GetBallCount()>0){

        Robot::intake->SetHopperPower(-0.8);
		Robot::intake->SetPusherPower(-0.8);
		Robot::intake->SetRollerPower(-0.8);

        if (Robot::intake->GetLowSensor() == false){ // move back until low sensor can't see the second ball
            Robot::intake->SetIndexerPower(0.5);
            // lostFirstOne = true;

            

        }
        else{
            Robot::intake->SetHopperPower(0);
            doneReverse = true; 
        }
        
        else{
            // Robot::intake->ResetIndexerMotorPosition();
            // Robot::intake->SetIndexerMotorPosition(inversePosition); // right before low sensor can see the first ball (still can't)

            if (abs(inversePosition) - abs(Robot::intake->GetIndexerMotorPosition()) == 0){

                Robot::intake->SetIndexerPower(0);
                Robot::intake->SetBallCount((Robot::intake->GetBallCount()) - 1);
                

                doneReverse = true;
            }  
        
        }
      

  
        
    }  */
    // Robot::intake->SetIndexerPower(0.2);


    // Robot::intake->SetHopperPower(-0.7);
    // Robot::intake->SetPusherPower(-0.7);
    // Robot::intake->SetRollerPower(-0.7);

}

// Make this return true when this Command no longer needs to run execute()
bool ReverseIntake::IsFinished() {

    //return doneReverse;

    return false;
}

// Called once after isFinished returns true
void ReverseIntake::End() {
    /*
    Robot::intake->SetHopperPower(0);
    Robot::intake->SetRollerPower(0);
    Robot::intake->SetIndexerPower(0);
    Robot::intake->SetIsReversing(false);

    lostFirstOne = false;
    doneReverse = false;
    */
    // Robot::intake->SetBallCount(0);
    // Robot::intake->ResetBallCounterState();
     Robot::intake->SetIsReversing(false);  

    if (Robot::intake->GetIsDeployed() == true){
        Robot::intake->SetPusherPower(0.8);
        Robot::intake->SetRollerPower(0.8);
        Robot::intake->SetHopperPower(0.6);
    }else{
        Robot::intake->SetPusherPower(0);
        Robot::intake->SetHopperPower(0);
        Robot::intake->SetIndexerPower(0);
        Robot::intake->SetRollerPower(0);
     }

     Robot::intake->ResetBallShotState();
    
    // Robot::intake->ResetIndexStage();
    Robot::intake->SetBallCount(Robot::intake->GetBallCount() - 1);
    

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ReverseIntake::Interrupted() {
    End();
}
