// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/ShootHigh.h"
#include <frc/SmartDashboard/SmartDashboard.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ShootHigh::ShootHigh(): frc::Command() {
    // Use Requires() here to declare subsystem dependencies
    // eg. Requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
double kP = 0.05, kI = 0, kD = 0, setSpeed = -3750;
// Called just before this Command runs the first time
void ShootHigh::Initialize() {
    frc::SmartDashboard::PutNumber("Shooter P", kP);
    frc::SmartDashboard::PutNumber("Shooter I", kI);
    frc::SmartDashboard::PutNumber("Shooter D", kD);
    frc::SmartDashboard::PutNumber("Shooter Set RPM", setSpeed);
}

// Called repeatedly when this Command is scheduled to run
void ShootHigh::Execute() {
    Robot::magazine->SetIsShooting(true);
    if(Robot::shooter->SetShooterVelocity(setSpeed, 150)){
        Robot::magazine->SetIndexerPower(1);
        Robot::magazine->SetHopperPower(0.5);
    }

    /*double p = frc::SmartDashboard::GetNumber("Shooter P", 0.05);
    double i = frc::SmartDashboard::GetNumber("Shooter I", 0);
    double d = frc::SmartDashboard::GetNumber("Shooter D", 0);
    double shooterSetSpeed = frc::SmartDashboard::GetNumber("Shoot Set RPM", 1500);
    if (p != kP || i != kI || d != kD) {
        Robot::shooter->SetPID(p, i, d);
        kP = p;
        kI = i;
        kD = d;
    }
    if (setSpeed != shooterSetSpeed) {
        Robot::shooter->SetShooterVelocity(shooterSetSpeed);
        setSpeed = shooterSetSpeed;
    }*/
}

// Make this return true when this Command no longer needs to run execute()
bool ShootHigh::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void ShootHigh::End() {
    Robot::magazine->SetHopperPower(0);
    Robot::magazine->SetIndexerPower(0);
    Robot::shooter->StopShooterMotor();
    Robot::magazine->SetIsShooting(false);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShootHigh::Interrupted() {
    End();
}
