// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/ShootHigh.h"
#include <frc/SmartDashboard/SmartDashboard.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ShootHigh::ShootHigh(): frc::Command() {
    // Use Requires() here to declare subsystem dependencies
    // eg. Requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter.get());
    Requires(Robot::driveTrain.get());
    Requires(Robot::intake.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
double kP = 0.0001, kI = 0.000001, kD = 0, kF = 0.000002, setSpeed = 3700; //close shot 3375 is good //med shots in high position at 3850 are good
// Called just before this Command runs the first time
void ShootHigh::Initialize() {
    Robot::shooter->SetHoodFarShot();
    frc::SmartDashboard::PutNumber("Shooter P", kP);
    frc::SmartDashboard::PutNumber("Shooter I", kI);
    frc::SmartDashboard::PutNumber("Shooter D", kD);
    frc::SmartDashboard::PutNumber("Shooter FF", kF);
    frc::SmartDashboard::PutNumber("Shooter Set RPM", setSpeed);
    Robot::driveTrain->setLimeLED(true);
}

// Called repeatedly when this Command is scheduled to run
bool canShoot = false;
double calculatedShooterSpeed = 0;
double targetVertical = 0;
int isAimedCount = 0;
double shooterSetSpeed = 0;
void ShootHigh::Execute() {
    if (!canShoot) {
        targetVertical = Robot::driveTrain->getLimeVertical();
        calculatedShooterSpeed = 4.2858 * targetVertical * targetVertical + 4.206434 * targetVertical + 3539.6577;
        Robot::shooter->SetShooterVelocity(calculatedShooterSpeed, 100);
    }
    if((Robot::driveTrain->autoAim(0) < 0.08) && !canShoot) {
        isAimedCount++;
    }
    else {
        isAimedCount = 0;
    }
    if (isAimedCount > 10) {
        canShoot = true;
    }
    if (canShoot) {
        Robot::intake->SetIsShooting(true);
        if(Robot::shooter->SetShooterVelocity(calculatedShooterSpeed, 100)){
            Robot::intake->SetIndexerPower(-0.3);
            Robot::intake->SetHopperPower(0.7);
        }
    }
/*
    double p = frc::SmartDashboard::GetNumber("Shooter P", 0.0001);
    double i = frc::SmartDashboard::GetNumber("Shooter I", 0.000001);
    double d = frc::SmartDashboard::GetNumber("Shooter D", 0);
    double f = frc::SmartDashboard::GetNumber("Shooter FF", 0.000002);
    // = frc::SmartDashboard::GetNumber("Shoot Set RPM", 1500);
    if (p != kP || i != kI || d != kD || f != kF) {
        Robot::shooter->SetPID(p, i, d, f);
        kP = p;
        kI = i;
        kD = d;
        kF = f;
    }
    //if (setSpeed != shooterSetSpeed) {
        
      //  setSpeed = shooterSetSpeed;
    //}
    if (Robot::oi->getDriverGamepad()->GetPOV() == 0) {
        shooterSetSpeed = 4000;
        Robot::shooter->SetShooterVelocity(shooterSetSpeed, 100);
        Robot::intake->SetHopperPower(0.5);
        Robot::intake->SetIndexerPower(-0.3);
    }
    else if (Robot::oi->getDriverGamepad()->GetPOV() == 180) {
        Robot::shooter->StopShooterMotor();
        Robot::intake->SetHopperPower(0);
        Robot::intake->SetIndexerPower(0);
    }*/
    
}

// Make this return true when this Command no longer needs to run execute()
bool ShootHigh::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void ShootHigh::End() {
    canShoot = false;
    isAimedCount = 0;
    Robot::intake->SetHopperPower(0);
    Robot::intake->SetIndexerPower(0);
    Robot::shooter->StopShooterMotor();
    Robot::intake->SetIsShooting(false);
    Robot::driveTrain->setLimeLED(false);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShootHigh::Interrupted() {
    End();
}
