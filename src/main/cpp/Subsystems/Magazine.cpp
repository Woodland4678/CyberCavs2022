// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Magazine.h"
#include <frc/SmartDashboard/SmartDashboard.h>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
rev::CANSparkMax indexerMotor{8, rev::CANSparkMax::MotorType::kBrushless};
rev::SparkMaxRelativeEncoder indexerEncoder = indexerMotor.GetEncoder();
rev::SparkMaxPIDController indexerPidController = indexerMotor.GetPIDController();
Magazine::Magazine() : frc::Subsystem("Magazine") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


indexerPidController.SetP(0.05);
indexerPidController.SetI(0);
indexerPidController.SetD(0);

hopperMotor.reset(new frc::PIDMotorController(hopperMotorTemp));
AddChild("hopperPWM", std::static_pointer_cast<frc::PIDMotorController>(hopperMotor));
hopperMotor->SetInverted(false);

lowSensor.reset(new frc::DigitalInput(0));
AddChild("lowSensor", lowSensor);

highSensor.reset(new frc::DigitalInput(1));
AddChild("highSensor", highSensor);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Magazine::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

bool isDeployed = false;
bool isShooting = false;

int ballCount=0;
double error=0;
double positionFirstBall=48.976; 
double positionSecondBall=70.395;

void Magazine::Periodic() {
    frc::SmartDashboard::PutNumber("Index Stage", indexStage);
    frc::SmartDashboard::PutNumber("Indexer Position", GetIndexerMotorPosition());
    frc::SmartDashboard::PutNumber("Ball Count", ballCount);
    // Put code here to be run every loop
        hopperMotor->Set(0.5);
        if (isDeployed){
            Index();            
        }

        if (isShooting){
            CheckNumberOfBallOut();
        }

    

}
void Magazine::SetIndexerPower(double power) {
    indexerMotor.Set(power);
}

void Magazine::SetHopperPower(double power){
    hopperMotor->Set(power);
}

bool Magazine::GetHighSensor(){ 
    return highSensor->Get();
}

bool Magazine::GetLowSensor(){
    return lowSensor->Get();
    
}

double Magazine::GetIndexerMotorPosition(){
    return indexerEncoder.GetPosition();
}

void Magazine::ResetIndexerMotorPosition(){
    indexerEncoder.SetPosition(0);
}


void Magazine::SetIndexerMotorPosition(double position){
    indexerPidController.SetReference(position,rev::ControlType::kPosition);
}

void Magazine::SetIsDeployed(bool setDeployStatus){
    isDeployed = setDeployStatus;
}
bool Magazine::GetIsDeployed(){
   return isDeployed;
}

void Magazine::SetIsShooting(bool setShootingStatus){
    isShooting = setShootingStatus;
}




bool Magazine::Index(){
    switch(indexStage){
        case WAITINGFIRSTBALL: // waiting
            if(GetLowSensor() == false){  // when we see the ball
                indexerMotor.Set(1);
                indexStage=INDEXFIRSTBALL;
                ballCount++;
            }
            break;

        case INDEXFIRSTBALL: // index
            if (GetLowSensor() == true){  // push the ball in until lowSensor can't see it
                ResetIndexerMotorPosition();
                SetIndexerMotorPosition(positionFirstBall); // need to find the position
                indexStage=ENSUREFIRSTBALLPOSITION;
            }
            break;
        
        case ENSUREFIRSTBALLPOSITION:
            error = abs(positionFirstBall-GetIndexerMotorPosition());
            if (error<=1){
                indexStage=WAITINGANDINDEXBOTHBALLS;
            }
            break;
        

        case WAITINGANDINDEXBOTHBALLS:

            if(GetLowSensor() == false){  // when we see the bal
                ResetIndexerMotorPosition();
                SetIndexerMotorPosition(positionSecondBall);
                indexStage=INDEXCOMPLETE;
                ballCount++;
            }
            break;

        case INDEXCOMPLETE: // done
            isDeployed=false;
            indexStage=WAITINGFIRSTBALL;
            return true;
            break;
    }

    return false;
}


int CheckBallStage=1;
void Magazine::CheckNumberOfBallOut(){
     switch(CheckBallStage){
        case 1:
            if(GetHighSensor()==true){ // if highsensor can't see the ball anymore, the first ball is out
                ballCount--;
                CheckBallStage++;
            }
            break;
            
        case 2:
            if(GetHighSensor()==false){ // high sensor sees the second ball
                CheckBallStage=3;
            }

            if (ballCount == 0){
                indexStage=WAITINGFIRSTBALL;
                CheckBallStage=1;
            }

            break;

        
        case 3:
            if(GetHighSensor()==true){ // if second ball is out
                ballCount--;
            }

            if (ballCount == 0){
                indexStage=WAITINGFIRSTBALL;
                CheckBallStage=1;
            }

            break;
     }
}
int Magazine::GetBallCount() {
    return ballCount;
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

