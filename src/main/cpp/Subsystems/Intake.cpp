// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Intake.h"
#include "frc/motorcontrol/PWMVictorSPX.h"
#include "frc/pidwrappers/PIDMotorController.h"
#include <frc/SmartDashboard/SmartDashboard.h>
#include <frc/DriverStation.h>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
rev::CANSparkMax pusherMotor{1, rev::CANSparkMax::MotorType::kBrushless};


rev::CANSparkMax rollerMotor{2, rev::CANSparkMax::MotorType::kBrushless};

Intake::Intake() : frc::Subsystem("Intake") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
deploySolenoid.reset(new frc::Solenoid(0, frc::PneumaticsModuleType::CTREPCM, 1));
AddChild("deploySolenoid", deploySolenoid);




    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
}

void Intake::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

frc::Color detectedColour;
frc::Color matchedColour;
bool isIntakeDeployed = false;
bool wrongBallDetected = false;
int reverseIntakeCount = 0;
void Intake::Periodic() {
    if (isIntakeDeployed) {
        if (m_Proximity > 300) {
            if (GetAllianceColour() == 0) {
                if (detectedColour.blue > 0.4 && detectedColour.red < 0.3) {
                    wrongBallDetected = true;
                }
            }
            else if (GetAllianceColour() == 1) {
                if (detectedColour.red > 0.4 && detectedColour.blue < 0.3) {
                    wrongBallDetected = true;
                }
            }
        }
    }
    if (wrongBallDetected) {
        pusherMotor.Set(-0.8);
        rollerMotor.Set(-0.8);
        reverseIntakeCount++;
        if (reverseIntakeCount > 30) {
            pusherMotor.Set(0);
            rollerMotor.Set(0);
        }
        if (reverseIntakeCount > 40) {
            pusherMotor.Set(0.8);
            rollerMotor.Set(0.8);
            reverseIntakeCount = 0;
            wrongBallDetected = false;
        }
    }
    detectedColour = m_ColourSensor.GetColor();
    matchedColour = m_ColourMatcher.MatchClosestColor(detectedColour, m_Confidence);
    m_Proximity = m_ColourSensor.GetProximity();
    frc::SmartDashboard::PutNumber("Detected Colour R", detectedColour.red);
    frc::SmartDashboard::PutNumber("Detected Colour G", detectedColour.green);
    frc::SmartDashboard::PutNumber("Detected Colour B", detectedColour.blue);
    frc::SmartDashboard::PutNumber("Color Sensor Proximity", m_Proximity);
    // Put code here to be run every loop

}
int Intake::GetAllianceColour() {
    return frc::DriverStation::GetInstance().GetAlliance();
}
void Intake::DeployIntake() {
    isIntakeDeployed = true;
    deploySolenoid->Set(true);
}
void Intake::RetractIntake() {
    isIntakeDeployed = false;
    deploySolenoid->Set(false);
}
void Intake::SetPusherPower(double power) {
    pusherMotor.Set(power);
}
void Intake::SetRollerPower(double power) {
    rollerMotor.Set(power);
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

