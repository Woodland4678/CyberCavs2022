// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#pragma once

#include "frc/commands/Subsystem.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "frc/DigitalInput.h"
#include "rev/CANSparkMax.h"
#include <frc/DoubleSolenoid.h>
#include <frc/PneumaticsModuleType.h>
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

/**
 *
 *
 * @author ExampleAuthor
 */
class Climber: public frc::Subsystem {
private:
	int climbStage = 0;
    int count = 0;
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//rev::CANSparkMax leaderMotor{10, rev::CANSparkMax::MotorType::kBrushless};
//rev::CANSparkMax followerMotor{9, rev::CANSparkMax::MotorType::kBrushless};
frc::DoubleSolenoid heightSolenoid{0, frc::PneumaticsModuleType::CTREPCM, 2, 3};
frc::DoubleSolenoid reachSolenoid{0, frc::PneumaticsModuleType::CTREPCM, 6, 7};
frc::DoubleSolenoid lockSolenoid{0, frc::PneumaticsModuleType::CTREPCM, 4, 5};
std::shared_ptr<frc::DigitalInput> calibrateLimit;
std::shared_ptr<frc::DigitalInput> barSensor;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

public:
Climber();
	void InitDefaultCommand() override;
	void Periodic() override;
	void SetClimberPower(double pwr);
    void SetClimberVelocity(double vel);

    bool CalibrateClimber();
    void SetClimberPosition(double position);

    void ExtendReachingArm();
    void RetractReachingArm();

    void Lock();
    void Unlock();

    void RaiseClimber();
    void LowerClimber();

    void Climb();

    void ClimbUp();
    void ClimbDown();

    void IncreaseClimbState();
    double GetClimberPosition();
    double GetClimberSpeed();
    bool adjustVelocity();
    bool gentleDecel();

    void CloseFile();
    void OpenFile();

    enum {
        CLIMBINGSETUP,
        DRIVINGTOBAR,
        GRABHIGHBAR,
        ENSUREHIGHBAR,
        SWING1,
        LIFTOFFMIDBAR,
        MOVETOTRAVERSEBAR,
        GRABTRAVERSEBAR,
        ENSUREGRABTRAVERSEBAR,
        SWING2,
        LIFTOFFHIGHBAR
	};

    enum {
        HORIZONTALTOFROMVERTICAL,
        VERTICALTOFROMMIDBAR,
        MIDBARTOFROMLOCKPOS,
        LOCKPOSTOFROMRETRACT,
        RETRACTCLAW,
        RETRACTTOFROMEXTEND,
        EXTENDCLAW,
        EXTENDTOFROMTRAVERSE,
        TRAVERSETOFROMFINAL,
        ENDOFCLIMB,
    };
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS


};

