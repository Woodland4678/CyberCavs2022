// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#pragma once

#include "frc/commands/Subsystem.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "rev/CANSparkMax.h"
#include <frc/PneumaticsModuleType.h>
#include <frc/Solenoid.h>
#include <frc/util/color.h>
#include "rev/ColorSensorV3.h"
#include "rev/ColorMatch.h"
#include "frc/DigitalInput.h"
#include "frc/motorcontrol/PWMVictorSPX.h"
#include "frc/pidwrappers/PIDMotorController.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
static constexpr auto i2cPort = frc::I2C::Port::kOnboard;
/**
 *
 *
 * @author ExampleAuthor
 */
class Intake: public frc::Subsystem {
private:
int indexStage=0;
int CheckBallStage=0;
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
std::shared_ptr<frc::Solenoid> deploySolenoid;
std::shared_ptr<frc::DigitalInput> lowSensor;
std::shared_ptr<frc::DigitalInput> highSensor;
frc::PWMVictorSPX hopperMotorTemp = frc::PWMVictorSPX{0};

std::shared_ptr<frc::PIDMotorController> hopperMotor;
//rev::CANSparkMax pusherMotor{1, rev::CANSparkMax::MotorType::kBrushless};
//rev::CANSparkMax rollerMotor{0, rev::CANSparkMax::MotorType::kBrushless};
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public:
Intake();
	void InitDefaultCommand() override;
	void Periodic() override;
	void SetRollerPower(double power);
	void SetPusherPower(double power);
	void DeployIntake();
	void RetractIntake();
	void IntakeCargo();

	int GetAllianceColour();
	void SetHopperPower(double power);
	void SetIndexerPower(double power);
	static constexpr frc::Color m_BlueTarget = frc::Color(0.143, 0.427, 0.429);
	static constexpr frc::Color m_GreenTarget = frc::Color(0.197, 0.561, 0.240);
	static constexpr frc::Color m_RedTarget = frc::Color(0.561, 0.232, 0.114);
	static constexpr frc::Color m_YellowTarget = frc::Color(0.361, 0.524, 0.113);

	//rev::ColorSensorV3 m_ColourSensor{i2cPort};
	//rev::ColorMatch m_ColourMatcher;
	double m_Confidence;
	frc::Color m_Colour;
	std::string m_ColourString;
	uint32_t m_Proximity;
	double m_Blue;
	double m_Red;
	double m_Green;
	double m_IR;

	bool GetLowSensor(); 
	bool GetHighSensor();

	void ResetIndexerMotorPosition();
	double GetIndexerMotorPosition();
	void SetIndexerMotorPosition(double position);

	bool Index();
	void CheckNumberOfBallOut();

	void SetIsDeployed(bool setDeployStatus);
	bool GetIsDeployed();

	void SetIsShooting(bool setShootingStatus);

	int GetBallCount();

	enum {
		WAITINGFIRSTBALL,
		INDEXFIRSTBALL,
		ENSUREFIRSTBALLPOSITION,
		WAITINGANDINDEXBOTHBALLS,
		INDEXCOMPLETE
	};

	enum{
		CHECKFIRSTBALLSTATUS,
		CHECKREMAININGBALL,
		CHECKSECONDBALLSTATUS
	};

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS


};

